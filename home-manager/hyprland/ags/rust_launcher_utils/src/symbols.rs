use fuzzy_matcher::FuzzyMatcher;
use serde::Serialize;

pub type Symbols = Vec<Symbol>;

#[derive(Clone, Serialize)]
pub struct Symbol {
  name: String,
  value: String
}

const MAX_ENTRIES: usize = 10;

include!(concat!(env!("OUT_DIR"), "/unicode.rs"));

pub fn load_symbols() -> Symbols {
  let symbols = UNICODE_CHARS // Defined in unicode.rs, which is generated by build.rs
    .iter()
    .map(|(name, chr)| Symbol { name: name.to_string(), value: chr.to_string()})
    .collect();

  symbols
}

pub fn execute(symbols: &mut Symbols, input: &str) {
  let matcher = fuzzy_matcher::skim::SkimMatcherV2::default().ignore_case();
  let mut symbols = symbols
    .iter()
    .filter_map(|symbol| {
      matcher
        .fuzzy_match(&symbol.name, input)
        .map(|score| (symbol, score))
    })
    .collect::<Vec<_>>();

  // Sort the symbol list according to the score
  symbols.sort_by(|a, b| b.1.cmp(&a.1));

  symbols.truncate(MAX_ENTRIES);

  let json_output = serde_json::json!({
    "error": false,
    "output": symbols.iter().map(|(symbol, _)| *symbol).collect::<Vec<&Symbol>>(),
  });

  println!("{}", json_output);
}